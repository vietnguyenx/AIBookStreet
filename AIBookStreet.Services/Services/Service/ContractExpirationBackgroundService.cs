using AIBookStreet.Services.Services.Interface;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace AIBookStreet.Services.Services.Service
{
    public class ContractExpirationBackgroundService : BackgroundService
    {
        private readonly IServiceScopeFactory _serviceScopeFactory;
        private readonly ILogger<ContractExpirationBackgroundService> _logger;
        private readonly TimeSpan _dailyRunTime = new TimeSpan(9, 0, 0); // Ch·∫°y l√∫c 9:00 AM

        public ContractExpirationBackgroundService(
            IServiceScopeFactory serviceScopeFactory, 
            ILogger<ContractExpirationBackgroundService> logger)
        {
            _serviceScopeFactory = serviceScopeFactory;
            _logger = logger;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            _logger.LogInformation("Contract Expiration Background Service ƒëang kh·ªüi ƒë·ªông...");

            while (!stoppingToken.IsCancellationRequested)
            {
                try
                {
                    var now = DateTime.Now;
                    var nextRun = GetNextRunTime(now);
                    var delay = nextRun - now;

                    _logger.LogInformation($"L·∫ßn ch·∫°y ti·∫øp theo s·∫Ω l√†: {nextRun:yyyy-MM-dd HH:mm:ss} (sau {delay.TotalHours:F1} gi·ªù)");

                    await Task.Delay(delay, stoppingToken);

                    if (!stoppingToken.IsCancellationRequested)
                    {
                        await ProcessContractExpirations();
                    }
                }
                catch (OperationCanceledException)
                {
                    _logger.LogInformation("Contract Expiration Background Service ƒë√£ b·ªã h·ªßy.");
                    break;
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "L·ªói trong Contract Expiration Background Service: {Message}", ex.Message);
                    
                    // N·∫øu c√≥ l·ªói, ƒë·ª£i 1 gi·ªù tr∆∞·ªõc khi th·ª≠ l·∫°i
                    await Task.Delay(TimeSpan.FromHours(1), stoppingToken);
                }
            }

            _logger.LogInformation("Contract Expiration Background Service ƒë√£ d·ª´ng.");
        }

        private DateTime GetNextRunTime(DateTime now)
        {
            var today = now.Date;
            var todayRunTime = today + _dailyRunTime;

            // N·∫øu ch∆∞a qua gi·ªù ch·∫°y h√¥m nay, ch·∫°y h√¥m nay
            if (now < todayRunTime)
            {
                return todayRunTime;
            }
            
            // N·∫øu ƒë√£ qua gi·ªù ch·∫°y h√¥m nay, ch·∫°y v√†o ng√†y mai
            return todayRunTime.AddDays(1);
        }

        private async Task ProcessContractExpirations()
        {
            try
            {
                _logger.LogInformation("B·∫Øt ƒë·∫ßu ki·ªÉm tra h·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n...");

                using var scope = _serviceScopeFactory.CreateScope();
                var userStoreService = scope.ServiceProvider.GetRequiredService<IUserStoreService>();

                // G·ª≠i email th√¥ng b√°o h·∫øt h·∫°n
                var (totalSent, message) = await userStoreService.SendExpirationWarningEmails();
                
                _logger.LogInformation($"‚úÖ Ho√†n th√†nh ki·ªÉm tra h·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n: {message}");

                // C·∫≠p nh·∫≠t c√°c h·ª£p ƒë·ªìng ƒë√£ h·∫øt h·∫°n
                var updateResult = await userStoreService.UpdateExpiredContracts();
                if (updateResult)
                {
                    _logger.LogInformation("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c h·ª£p ƒë·ªìng h·∫øt h·∫°n");
                }
                else
                {
                    _logger.LogWarning("‚ö†Ô∏è C√≥ l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i h·ª£p ƒë·ªìng h·∫øt h·∫°n");
                }

                _logger.LogInformation($"üìä T·ªïng k·∫øt: ƒê√£ g·ª≠i {totalSent} email th√¥ng b√°o h·∫øt h·∫°n h·ª£p ƒë·ªìng");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "üí• L·ªói khi x·ª≠ l√Ω h·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n: {Message}", ex.Message);
                throw;
            }
        }

        public override async Task StopAsync(CancellationToken stoppingToken)
        {
            _logger.LogInformation("Contract Expiration Background Service ƒëang d·ª´ng...");
            await base.StopAsync(stoppingToken);
        }
    }
} 